# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import p2psync_pb2 as p2psync__pb2


class P2PSyncStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PeerListUpdate = channel.unary_unary(
                '/P2PSync/PeerListUpdate',
                request_serializer=p2psync__pb2.PeerUpdate.SerializeToString,
                response_deserializer=p2psync__pb2.Empty.FromString,
                )
        self.ListenCommands = channel.unary_stream(
                '/P2PSync/ListenCommands',
                request_serializer=p2psync__pb2.Empty.SerializeToString,
                response_deserializer=p2psync__pb2.DatabaseCommand.FromString,
                )
        self.Connect = channel.unary_unary(
                '/P2PSync/Connect',
                request_serializer=p2psync__pb2.Peer.SerializeToString,
                response_deserializer=p2psync__pb2.Empty.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/P2PSync/Heartbeat',
                request_serializer=p2psync__pb2.Empty.SerializeToString,
                response_deserializer=p2psync__pb2.Empty.FromString,
                )
        self.SendCommand = channel.unary_unary(
                '/P2PSync/SendCommand',
                request_serializer=p2psync__pb2.DatabaseCommand.SerializeToString,
                response_deserializer=p2psync__pb2.Empty.FromString,
                )
        self.RequestPeerList = channel.unary_unary(
                '/P2PSync/RequestPeerList',
                request_serializer=p2psync__pb2.Peer.SerializeToString,
                response_deserializer=p2psync__pb2.PeerList.FromString,
                )


class P2PSyncServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PeerListUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenCommands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestPeerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_P2PSyncServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PeerListUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.PeerListUpdate,
                    request_deserializer=p2psync__pb2.PeerUpdate.FromString,
                    response_serializer=p2psync__pb2.Empty.SerializeToString,
            ),
            'ListenCommands': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenCommands,
                    request_deserializer=p2psync__pb2.Empty.FromString,
                    response_serializer=p2psync__pb2.DatabaseCommand.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=p2psync__pb2.Peer.FromString,
                    response_serializer=p2psync__pb2.Empty.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=p2psync__pb2.Empty.FromString,
                    response_serializer=p2psync__pb2.Empty.SerializeToString,
            ),
            'SendCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCommand,
                    request_deserializer=p2psync__pb2.DatabaseCommand.FromString,
                    response_serializer=p2psync__pb2.Empty.SerializeToString,
            ),
            'RequestPeerList': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestPeerList,
                    request_deserializer=p2psync__pb2.Peer.FromString,
                    response_serializer=p2psync__pb2.PeerList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'P2PSync', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class P2PSync(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PeerListUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/P2PSync/PeerListUpdate',
            p2psync__pb2.PeerUpdate.SerializeToString,
            p2psync__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/P2PSync/ListenCommands',
            p2psync__pb2.Empty.SerializeToString,
            p2psync__pb2.DatabaseCommand.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/P2PSync/Connect',
            p2psync__pb2.Peer.SerializeToString,
            p2psync__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/P2PSync/Heartbeat',
            p2psync__pb2.Empty.SerializeToString,
            p2psync__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/P2PSync/SendCommand',
            p2psync__pb2.DatabaseCommand.SerializeToString,
            p2psync__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestPeerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/P2PSync/RequestPeerList',
            p2psync__pb2.Peer.SerializeToString,
            p2psync__pb2.PeerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
